name: CI/CD Pipeline - Test & Deploy to AWS EC2 via SSM

on:
  push:
    branches:
      - develop
      - main

jobs:
  test:
    name: Run Unit & Integration Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Build Docker Test Image
      run: |
        docker build -t ml-scoring-api-test -f Dockerfile.test.dockerfile .

    - name: Run Tests in Docker Container
      run: |
        docker run --rm ml-scoring-api-test

  build-image:
    name: Build & Push Docker Image (Develop Only)
    runs-on: ubuntu-latest
    needs: test  # ðŸš¨ Se ejecuta solo si los tests pasan
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Build and Push Docker Image to ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin 796973493835.dkr.ecr.us-east-1.amazonaws.com
        docker build -t 796973493835.dkr.ecr.us-east-1.amazonaws.com/ml-scoring-api-dev:latest .
        docker push 796973493835.dkr.ecr.us-east-1.amazonaws.com/ml-scoring-api-dev:latest

  deploy:
    name: Deploy to AWS EC2 (Main Only)
    runs-on: ubuntu-latest
    needs: test  # ðŸš¨ Solo se ejecuta si los tests pasan
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Start EC2 Instance
      run: |
        aws ec2 start-instances --instance-ids "i-0d3ba109fefc8da8e"
        echo "Waiting for instance to start..."
        aws ec2 wait instance-running --instance-ids "i-0d3ba109fefc8da8e"
        echo "Instance is running."

    - name: Build and Push Docker Image to ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin 796973493835.dkr.ecr.us-east-1.amazonaws.com
        docker build -t 796973493835.dkr.ecr.us-east-1.amazonaws.com/ml-scoring-api:latest .
        docker push 796973493835.dkr.ecr.us-east-1.amazonaws.com/ml-scoring-api:latest

    - name: Deploy Application via SSM
      run: |
        aws ssm send-command \
          --instance-ids "i-0d3ba109fefc8da8e" \
          --document-name "AWS-RunShellScript" \
          --comment "Deploy ml-scoring-api" \
          --parameters commands='
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin 796973493835.dkr.ecr.us-east-1.amazonaws.com
            docker pull 796973493835.dkr.ecr.us-east-1.amazonaws.com/ml-scoring-api:latest
            docker stop $(docker ps -q) || true
            docker run -d -p 80:8888 796973493835.dkr.ecr.us-east-1.amazonaws.com/ml-scoring-api:latest
          '

    - name: Stop EC2 Instance
      run: |
        aws ec2 stop-instances --instance-ids "i-0d3ba109fefc8da8e"
        echo "Waiting for instance to stop..."
        aws ec2 wait instance-stopped --instance-ids "i-0d3ba109fefc8da8e"
        echo "Instance is stopped."

