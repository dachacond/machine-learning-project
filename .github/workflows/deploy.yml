name: CI/CD Pipeline - Test & Deploy to AWS EKS via kubectl

on:
  push:
    branches:
      - develop
      - main

permissions:
  id-token: write
  contents: read

jobs:

  lint:
    name: Lint Code with Flake8
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install Flake8
      run: pip install flake8

    - name: Run Linting
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  # test job removed per request â€” tests are currently disabled in CI

  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    if: github.ref_name == 'main'

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: us-east-1

    - name: Debug AWS STS Identity
      run: aws sts get-caller-identity

    - name: Retrieve Secrets from AWS Secrets Manager
      id: aws-secrets
      run: |
        SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id /github-actions/secrets --query SecretString --output text)
        echo "::add-mask::$SECRET_JSON"
        echo "AWS_REGION=$(echo $SECRET_JSON | jq -r .AWS_REGION)" >> $GITHUB_ENV
        echo "ECR_URL=$(echo $SECRET_JSON | jq -r .ECR_URL)" >> $GITHUB_ENV
        echo "EKS_CLUSTER_NAME=$(echo $SECRET_JSON | jq -r .EKS_CLUSTER_NAME)" >> $GITHUB_ENV

    - name: Replace ECR URL placeholder in manifests
      run: |
        echo "Replacing REPLACE_ECR_URL with $ECR_URL in manifests"
        sed -i "s|REPLACE_ECR_URL|${ECR_URL}|g" deployment.yaml || true
        sed -i "s|REPLACE_ECR_URL|${ECR_URL}|g" service.yaml || true

    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_URL }}

    - name: Build and Push Docker Image to ECR
      run: |
        docker build -t ${{ env.ECR_URL }}/ml-scoring-api:latest .
        docker push ${{ env.ECR_URL }}/ml-scoring-api:latest

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: build
    if: github.ref_name == 'main'

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: us-east-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.11.2

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: Terraform Apply
      id: terraform-apply
      working-directory: ./terraform
      run: terraform apply -auto-approve
      
  terraform-cleanup:
    name: Terraform Cleanup on Failure
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: failure() && github.ref_name == 'main'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: us-east-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.11.2

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: Terraform Destroy for Cleanup
      working-directory: ./terraform
      run: terraform destroy -auto-approve

  deploy:
    name: Deploy to AWS EKS
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: github.ref_name == 'main'

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: us-east-1

    - name: Debug AWS STS Identity
      run: aws sts get-caller-identity

    - name: Retrieve Secrets from AWS Secrets Manager
      id: aws-secrets
      run: |
        SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id /github-actions/secrets --query SecretString --output text)
        echo "::add-mask::$SECRET_JSON"
        echo "AWS_REGION=$(echo $SECRET_JSON | jq -r .AWS_REGION)" >> $GITHUB_ENV
        echo "ECR_URL=$(echo $SECRET_JSON | jq -r .ECR_URL)" >> $GITHUB_ENV
        echo "EKS_CLUSTER_NAME=$(echo $SECRET_JSON | jq -r .EKS_CLUSTER_NAME)" >> $GITHUB_ENV

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

    - name: Deploy to EKS
      run: |
        kubectl apply -f deployment.yaml
        kubectl apply -f service.yaml

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref_name == 'main'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::796973493835:role/GitHubActionsRole
        aws-region: us-east-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.11.2

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: Terraform Destroy
      working-directory: ./terraform
      run: terraform destroy -auto-approve





